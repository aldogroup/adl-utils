{"name":"Adl-utils","tagline":"A set of tools that we use at the ALDO Group for our Middleman applications.","body":"# ALDO Utilities [![Code Climate](https://codeclimate.com/github/aldogroup/adl-utils/badges/gpa.svg)](https://codeclimate.com/github/aldogroup/adl-utils) [![Test Coverage](https://codeclimate.com/github/aldogroup/adl-utils/badges/coverage.svg)](https://codeclimate.com/github/aldogroup/adl-utils)\r\n\r\n\r\n- [Introduction](#introduction)\r\n- [Installation](#installation)\r\n- [Command Line](#command-line)\r\n  - \t[Daemon](#daemon)\r\n  -   [Rebuild](#rebuild)\r\n  -   [Impex](#impex)\r\n  -   [Release](#release)\r\n  -   [Akamai Sync](#akamai-sync)\r\n\r\n- [Helpers](#helpers)\r\n  -   [Price formatter](#price-formatter)\r\n  -   [Country conditionals](#country-conditionals)\r\n  -   [Page classes](#page-classes)\r\n  -   [Sanitize clean](#sanitize-clean)\r\n  -   [Supprice](#supprice)\r\n  -   [Convert class](#convert-class)\r\n\r\nIntroduction\r\n------------\r\n\r\nA set of tools that we use at the ALDO Group for our Middleman applications.\r\n Our goal is to create a common playground for centralizing our helpers and modules that we use everyday.\r\n\r\n**List of features**\r\n\r\n-   Run Middleman as a Daemon (only unix based systems) (Still in Development)\r\n-   Tag our Git releases (Still in Development)\r\n-   Generate impex files for Hybris\r\n-   Cleanly restructure the build folder\r\n-   Sync with the Akamai server\r\n\r\n* * * * *\r\n\r\nInstallation\r\n------------\r\n\r\nAdd the following to your Gemfile:\r\n `gem 'adl-utils', :git => 'https://github.com/aldogroup/adl-utils'`\r\n\r\nThen simply run `bundle install` to install/update the gems.\r\n\r\nIn order to use middleman with the multiple environments and platforms easily, you can use these: \r\n [aliases](https://gist.github.com/blabassi/8b0cd7e46794ca306e2f) (highly recommended but not mandatory)  \r\n Add them to your `~/.zshrc` or `~/.bashrc` file.  \r\n You will be able to start middleman with those aliases:\r\n \r\n For Icongo Platform:\r\n \r\n - `icongo` Launch Middleman in dev environment \r\n - \t`icongo-staging` Launch Middleman in staging environment \t\r\n -  `icongo-prod` Launch Middleman in production environment\r\n\r\n \r\nFor Hybris Platform:\r\n \r\n- `hybris` Launch Middleman in dev environment\r\n- `hybris-staging` Launch Middleman in staging environment\r\n- `hybris-prod` Launch Middleman in production environment\r\n\r\n* * * * *\r\n\r\nCommand Line\r\n------------\r\n\r\n### Daemon\r\n\r\n**Usage:**\r\n `middleman daemon [--options]`\r\n\r\n**Options:**\r\n `--start` Run Middleman as a daemon  \r\n `--restart` Restart the Middleman daemon  \r\n `--stop` Stop the Middleman daemon\r\n\r\n**Example:**\r\n `middleman daemon --start`  \r\n\r\nGiven this example, we boot up a Middleman daemon. You can also restart and stop the daemon.\r\n\r\n* * * * *\r\n\r\n### Rebuild\r\n\r\n**Usage:**  \r\n `middleman rebuild [--options]`\r\n\r\n**Options:**  \r\n `-e, [--environment=ENVIRONMENT]` The environment to rebuild (Default: 'dev')  \r\n `-p, [--platform=PLATFORM]` The platform that we want to rebuild (icongo or hybris) (Default: ‘icongo’)\r\n\r\n**Example:**\r\n `middleman rebuild -e prod -p hybris`\r\n\r\nGiven this example, we restructure the Hybris production build folder generated by Middleman.\r\n\r\n* * * * *\r\n\r\n### Impex\r\n\r\nThis command will generate impex files from your build directory.  \r\nIt will also prompt you if you want to build your project\r\n\r\n**Usage:**\r\n `middleman impex [--options]`\r\n\r\n**Without options:**\r\n It will only generate the impex that goes for the PCM (Landing Pages & Category banners).  \r\n It will generate the impex scheduled version that will need to be uploaded first and also the confirm version that will need to be uploaded after (when the campaign is live).\r\n\r\n**Example of file generated:**  \r\n `14-08-11_17.12_fall-winter-confirm-on-12-08-2014_14.30.00_ca.impex`  \r\n `14-08-11_17.12_fall-winter-scheduled-for-12-08-2014_13.30.00_ca.impex`\r\n\r\n**Options:**  \r\n `--homepage` Will generate impex for the homepage without time restriction.  \r\n `--l3` Will generate all the level3 pages. (`generate_l3` must be set to true in `config.rb`)\r\n\r\n**Example:**  \r\n `VER=hybris REV=staging middleman impex`  \r\nor  \r\n `hybris-staging impex`   \r\n\r\nGiven this example, Middleman will build the project and generate the PCM impex files for  staging environment.\r\n\r\n* * * * *\r\n\r\n### Release\r\n\r\n**Usage:**\r\n `middleman release [--options]`\r\n\r\n**Options:**\r\n `-b` Run the Middleman build command before creating the release  \r\n `-e` Specify the environment for the release (Default: ‘dev’)  \r\n `-p` The platform that we want to release for (icongo or hybris) (Default: ‘icongo’)\\`\r\n\r\n**Example:**\r\n `middleman release -b -e prod -p hybris`\r\n\r\nGiven this example, Middleman will tag a release for production on our Hybris platform.\r\n\r\n* * * * *\r\n\r\n### Akamai Sync\r\n\r\n**Usage:**\r\n `middleman akamai_sync [--options]`\r\n\r\n**Options:**\r\n `-b` Run the Middleman build command before creating the release  \r\n `-e` Specify environment for generating impex files (Default: ‘dev’)  \r\n `-p` The platform that we want to release for (icongo or hybris) (Default: ‘icongo’)\\`  \r\n\r\n**Example:**\r\n `middleman akamai_sync -b -e prod -p hybris`\r\n\r\nGiven this example, Middleman will sync with our Akamai server for production on our Hybris platform.\r\n\r\n* * * * *\r\n\r\nHelpers\r\n-------\r\n\r\n#### Price formatter\r\n\r\nAutomatically formats the price depending on the locale.\r\n\r\n`format_price(price_value)`\r\n\r\n#### Country conditionals\r\n\r\nHelps to specify country specific logic using conditionals.\r\n\r\n-   US: `is_us`\r\n-   CA: `is_ca`\r\n-   CA-ENG: `is_ca('en')`\r\n-   CA-FRE: `is_ca('fr')`\r\n-   UK: `is_uk`\r\n\r\nFor instance, if we want to include a module that is going to only be showcased on the US website, in our slim template, do this:\r\n\r\n``` {.prettyprint}\r\n- if is_us\r\n    / Include some US logic here /\r\n```\r\n\r\n#### Page classes\r\n\r\nGenerates classes based on the page name and current locale.\r\n\r\n`page_class`\r\n\r\n#### Sanitize clean\r\n\r\nWill replace special characters with regular ones and replace spaces with dashes.\r\n\r\n`sanitize_clean(string)`\r\n\r\n**Example:**\r\n\r\n> sanitize\\_clean(‘spécial string’)\r\n>  =\\> special-string\r\n\r\n`newline2br(two_line_string)`\r\n\r\nWill check for `\\n` inside the variable and replace it with a `<br />`.\r\n\r\n**Example:**\r\n\r\n> newline2br(‘this is an\\\\nexample’)  \r\n>  =\\> this is an`<br />`example\r\n\r\n#### Supprice\r\n\r\nWill search for a currency and wrap it inside a `<sup>` tag.\r\n\r\n`supprice(price)`\r\n\r\n#### Convert class\r\n\r\nWill remove the ‘columns’ string and use the integer to generate the class.\r\n\r\n`convert_class(number of columns)`\r\n\r\n**Example:**\r\n\r\n> convert\\_class(‘8 columns’)  \r\n>  =\\> adl-col8\r\n\r\n#### GetLink\r\n\r\nWill return the right column name from the spreadsheet depending on the platform.  \r\n(works actually only for ALDO)\r\n\r\n`getLink(url)`\r\n\r\n**Example:**\r\n\r\n> link = getLink(cta_link)  \r\n\r\nif hybris\r\n\t`cta_link = cta_link_hybris`\r\nelse\r\n\t`cta_link` ","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}